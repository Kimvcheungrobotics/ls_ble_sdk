import asyncio
from bleak import BleakScanner, BleakClient
import os

class BLEClient:
    def __init__(self, device_name, main_service):
        self.main_service = main_service  # UUID of main service
        self.device_name = device_name  # Name of the device to connect to
        self.characteristics = []  # List of all characteristics
        self.target_device_addr = None  # Address of the target device
        self.loop = asyncio.get_event_loop()  # Get the event loop

    async def discover_devices(self):
        # List the device names and their addresses
        devices = await BleakScanner.discover()
        d_dict = {d.name: d.address for d in devices}
        return d_dict

    async def select_device(self, device_name):
        # Select the device
        addrs = await self.discover_devices()
        target_addr = addrs.get(device_name)

        if target_addr:
            print(f'Device found. Device address: {target_addr}')
            return target_addr
        else:
            raise ValueError(
                f'Device {device_name} not found in discovered devices.')

    async def show_services(self):
        async with BleakClient(self.target_device_addr) as client:
            svcs = await client.get_services()

            for svc in svcs:
                print(svc.uuid, svc.description)

    async def get_characteristics(self):
        async with BleakClient(self.target_device_addr) as client:
            svcs = await client.get_services()
            found = False

            for svc in svcs:
                # Skip uneeded services
                if svc.uuid == self.main_service:
                    # Get characteristics from main service
                    self.characteristics = [
                        [char.description, char.uuid, char.handle] for char in svc.characteristics]

                    print('Got characteristics')
                    found = True
                    break

            if not found:
                raise ValueError('Main service was not found')

    def show_chars(self):
        # Show characteristics visible for main service
        print('\nCharacteristics available (description, uuid, handle)')

        for desc, uuid, handle in self.characteristics:
            print(desc, uuid, handle)

        print('\n\n')

    async def connect(self):
        if not self.target_device_addr:
            self.target_device_addr = await self.select_device(self.device_name)
            await self.get_characteristics()

    async def write_characteristic(self, data, char_uuid, get_response=False):
        # char_uuid is the characteristic to write to
        # you need to determine if get_response needs to be true or false depending on your use case
        async with BleakClient(self.target_device_addr) as client:
            await client.write_gatt_char(char_uuid, data.encode('utf-8'), response=get_response)

    async def read_characteristic(self, char_uuid):
        # char_uuid is the characteristic to read from
        data = await self.loop.run_in_executor(None, self._read_characteristic, char_uuid)
        
        if type(data) == bytearray:
            data = int.from_bytes(data, byteorder='big')
            print(f'Data: {data}')
        else:
            print(f'Data: {data.decode()}')

    def _read_characteristic(self, char_uuid):
        # This function is run in the event loop to read the characteristic
        with BleakClient(self.target_device_addr) as client:
            data = client.read_gatt_char(char_uuid)
            return data


# Example Usage:
if __name__ == "__main__":
    # Name of device, you don't need the address if you have the name
    device_name = 'iPhone (8)'
    main_service_uuid = '0000180f-0000-1000-8000-00805f9b34fb'  # UUID of the main service
    target_char = '00002a19-0000-1000-8000-00805f9b34fb'
    client = BLEClient(device_name, main_service_uuid)
    asyncio.run(client.connect())
    client.show_chars()
    asyncio.run(client.read_characteristic(target_char))
